<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/shared/components/controls/location-selector/location-selector-field/location-selector-field.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/shared/components/controls/location-selector/location-selector-field/location-selector-field.ts" />
              <option name="originalContent" value="import {&#10;  ChangeDetectionStrategy,&#10;  Component,&#10;  forwardRef,&#10;  inject,&#10;  signal,&#10;} from '@angular/core';&#10;import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';&#10;import { MatButton } from '@angular/material/button';&#10;import { MatDialog, MatDialogModule } from '@angular/material/dialog';&#10;import { firstValueFrom } from 'rxjs';&#10;&#10;import { EventLocation } from '../../../../../../shared/types/location';&#10;import { LocationSelectorDialog } from '../location-selector-dialog/location-selector-dialog';&#10;&#10;@Component({&#10;  changeDetection: ChangeDetectionStrategy.OnPush,&#10;  imports: [MatDialogModule, MatButton],&#10;  providers: [&#10;    {&#10;      multi: true,&#10;      provide: NG_VALUE_ACCESSOR,&#10;      useExisting: forwardRef(() =&gt; LocationSelectorField),&#10;    },&#10;  ],&#10;  selector: 'app-location-selector-field',&#10;  styles: ``,&#10;  templateUrl: './location-selector-field.html',&#10;})&#10;export class LocationSelectorField implements ControlValueAccessor {&#10;  protected readonly disabled = signal&lt;boolean&gt;(false);&#10;  // eslint-disable-next-line unicorn/no-useless-undefined&#10;  protected readonly value = signal&lt;EventLocation | null&gt;(null);&#10;  private readonly dialog = inject(MatDialog);&#10;&#10;  // Registers a callback for when the value changes&#10;  registerOnChange(function_: (value: EventLocation) =&gt; void): void {&#10;    this._onChange = function_;&#10;  }&#10;  // Registers a callback for when the field is touched&#10;  registerOnTouched(function_: () =&gt; void): void {&#10;    this._onTouched = function_;&#10;  }&#10;&#10;  // Sets the disabled state&#10;  setDisabledState(isDisabled: boolean): void {&#10;    this.disabled.set(isDisabled);&#10;  }&#10;&#10;  // Called by Angular to write a value to the field&#10;  writeValue(value: EventLocation | null): void {&#10;    this.value.set(value);&#10;  }&#10;&#10;  // Called when the user opens the dialog to select a location&#10;  protected async openDialog() {&#10;    if (this.disabled()) return;&#10;    // Open dialog and handle result&#10;    const dialogReference = this.dialog.open(LocationSelectorDialog);&#10;    const value = await firstValueFrom(dialogReference.afterClosed());&#10;    if (value) {&#10;      this.value.set(value);&#10;      this._onChange(value);&#10;      this._onTouched();&#10;    }&#10;  }&#10;&#10;  // eslint-disable-next-line @typescript-eslint/no-empty-function&#10;  private _onChange: (value: EventLocation) =&gt; void = () =&gt; {};&#10;&#10;  // eslint-disable-next-line @typescript-eslint/no-empty-function&#10;  private _onTouched: () =&gt; void = () =&gt; {};&#10;}&#10;" />
              <option name="updatedContent" value="import {&#10;  ChangeDetectionStrategy,&#10;  Component,&#10;  forwardRef,&#10;  inject,&#10;  signal,&#10;} from '@angular/core';&#10;import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';&#10;import { MatButton } from '@angular/material/button';&#10;import { MatDialog, MatDialogModule } from '@angular/material/dialog';&#10;import { firstValueFrom } from 'rxjs';&#10;&#10;import { EventLocation } from '../../../../../../shared/types/location';&#10;import { LocationSelectorDialog } from '../location-selector-dialog/location-selector-dialog';&#10;&#10;@Component({&#10;  changeDetection: ChangeDetectionStrategy.OnPush,&#10;  imports: [MatDialogModule, MatButton],&#10;  providers: [&#10;    {&#10;      multi: true,&#10;      provide: NG_VALUE_ACCESSOR,&#10;      useExisting: forwardRef(() =&gt; LocationSelectorField),&#10;    },&#10;  ],&#10;  selector: 'app-location-selector-field',&#10;  styles: ``,&#10;  templateUrl: './location-selector-field.html',&#10;})&#10;export class LocationSelectorField implements ControlValueAccessor {&#10;  protected readonly disabled = signal&lt;boolean&gt;(false);&#10;  // eslint-disable-next-line unicorn/no-useless-undefined&#10;  protected readonly value = signal&lt;EventLocation | null&gt;(null);&#10;  private readonly dialog = inject(MatDialog);&#10;&#10;  // Registers a callback for when the value changes&#10;  registerOnChange(function_: (value: EventLocation) =&gt; void): void {&#10;    this._onChange = function_;&#10;  }&#10;  // Registers a callback for when the field is touched&#10;  registerOnTouched(function_: () =&gt; void): void {&#10;    this._onTouched = function_;&#10;  }&#10;&#10;  // Sets the disabled state&#10;  setDisabledState(isDisabled: boolean): void {&#10;    this.disabled.set(isDisabled);&#10;  }&#10;&#10;  // Called by Angular to write a value to the field&#10;  writeValue(value: EventLocation | null): void {&#10;    this.value.set(value);&#10;  }&#10;&#10;  // Called when the user opens the dialog to select a location&#10;  protected async openDialog() {&#10;    if (this.disabled()) return;&#10;    // Open dialog and handle result&#10;    const dialogReference = this.dialog.open(LocationSelectorDialog);&#10;    const value = await firstValueFrom(dialogReference.afterClosed());&#10;    if (value) {&#10;      this.value.set(value);&#10;      this._onChange(value);&#10;      this._onTouched();&#10;    }&#10;  }&#10;&#10;  // eslint-disable-next-line @typescript-eslint/no-empty-function&#10;  private _onChange: (value: EventLocation) =&gt; void = () =&gt; {};&#10;&#10;  // eslint-disable-next-line @typescript-eslint/no-empty-function&#10;  private _onTouched: () =&gt; void = () =&gt; {};&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>